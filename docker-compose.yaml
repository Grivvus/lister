services:
  backend:
    build: 
      context: ./backend/
    container_name: lister_backend 
    environment:
      PORT: 8000
    ports:
      - "8000:8000"
    command: "sh /app/scripts/start.sh"
    env_file:
      - ./backend/.env
    volumes:
      - ./backend:/app/
    depends_on:
      mongodb:
        condition: service_healthy
    restart: on-failure

  bot:
    build:
      context: ./tg_bot/ 
    container_name: lister_bot
    command: "python src/main.py"
    volumes:
      - ./tg_bot/:/app/
    # env_file:
    #   - ./tg_bot/.env 
    depends_on:
      - backend
    restart: on-failure

  mongodb:
    image: mongo
    env_file:
      - .env
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME} 
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
    ports:
      - 27017:27017
    healthcheck:
      test: echo 'db.runCommand({serverStatus:1}).ok' | mongo admin -u $MONGO_INITDB_ROOT_USERNAME -p $MONGO_INITDB_ROOT_PASSWORD --quiet | grep 1
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 20s
    restart: on-failure
  
  mongo-express:
    image: mongo-express
    depends_on:
      mongodb:
        condition: service_healthy
    ports:
      - 8081:8081
    env_file:
      - .env
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      ME_CONFIG_MONGODB_URL: mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongo:27017/
      ME_CONFIG_BASICAUTH: false
